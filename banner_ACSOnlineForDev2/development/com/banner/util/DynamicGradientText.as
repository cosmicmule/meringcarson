package com.banner.util {		import flash.display.*;	import flash.events.*;	import flash.geom.*;	import flash.text.*;		// custom classes	import com.greensock.*; 	import com.greensock.easing.*; 	import com.greensock.plugins.*;	TweenPlugin.activate([TransformMatrixPlugin]);			/**	 *  text field and a gradient box,	 *  and that sets the text field as a mask on the gradient box to	 *  create the effect of a gradient fill on the text.	 */	 	public class DynamicGradientText extends MovieClip {		private var container = new Sprite();		private var text_txt:TextField;		private var currentFont:Font = new SeptemberBold();		private var textFormat:TextFormat;		private var buttonFormat:TextFormat;		private var gradBox:Sprite;		private var fillType:String = GradientType.LINEAR;		private var colors:Array = [0xd6d6d6, 0x4d4c4d,0xd6d6d6];		private var alphas:Array = [1,1,1];		private var ratios:Array = [120, 155, 185];//[100, 145, 185]		private var matr:Matrix = new Matrix();		private var spread:String = SpreadMethod.REFLECT;		private var defaultMessage_str:String;		private var fontSize:String;						public function DynamicGradientText(custom_str = "INDYCAR WORLD CHAMPIONSHIPS", size:String = "30") {			// set custom string			defaultMessage_str = custom_str;			fontSize = size;			init();		}								/**		 *  @private		 *  Initialization function that creates all applicable elements, sets		 *  default values and formats, sets mask, and adds elements to display list.		 */		private function init():void {						currentFont = new SeptemberBold();						// textfield instance			text_txt = new TextField();			text_txt.type = TextFieldType.DYNAMIC;			text_txt.width = text_txt.textWidth;						// textfield format			textFormat = new TextFormat();			textFormat.font = currentFont.fontName;			textFormat.size = fontSize;			textFormat.color = 0x333333;			textFormat.bold = true;			textFormat.align = TextFormatAlign.LEFT;						// gradient box			gradBox = new Sprite();			matr.createGradientBox(100, 100, Math.PI/2, 0, 0);			gradBox.graphics.beginGradientFill(fillType, colors, alphas, ratios, matr, spread);			gradBox.graphics.drawRect(0, 0, 100, 100);			gradBox.graphics.endFill();						// add text to textfield			updateTextField(defaultMessage_str);						// set mask			setTextMask();						container.addChild(gradBox);			container.addChild(text_txt);			addChild(container);						// set skewY to text container			TweenLite.to(container, 0, {transformMatrix:{skewX:15}});					}								private function createGradientBox():void {			// Create at default size of 100x100. Will resize on text update.			gradBox = new Sprite();			matr.createGradientBox(100, 100, Math.PI/2, 0, 0);			gradBox.graphics.beginGradientFill(fillType, colors, alphas, ratios, matr, spread);			gradBox.graphics.drawRect(0, 0, 100, 100);			gradBox.graphics.endFill();		}				private function updateTextField(pText_str:String):void {			text_txt.defaultTextFormat = textFormat;			text_txt.embedFonts = true;			text_txt.antiAliasType = AntiAliasType.ADVANCED;			text_txt.htmlText = pText_str;			text_txt.selectable = false;						text_txt.width = text_txt.textWidth;			text_txt.height = text_txt.textHeight;						gradBox.x = text_txt.x + 3;			gradBox.y = text_txt.y - 3;			gradBox.width = text_txt.textWidth;			gradBox.height = text_txt.textHeight + 6;		}								/**		 *  @private		 *  Sets text as mask on gradient box.		 */		private function setTextMask():void {			gradBox.mask = text_txt;		}			}	}